version: '3.8'

services:
  # Nginx reverse proxy with SSL termination
  nginx:
    image: nginx:alpine
    container_name: translation-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    depends_on:
      - app
    networks:
      - translation-network
    restart: unless-stopped

  # Certbot for SSL certificates
  certbot:
    image: certbot/certbot
    container_name: translation-certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    command: certonly --webroot --webroot-path=/var/www/certbot --email your-email@example.com --agree-tos --no-eff-email -d your-domain.com
    depends_on:
      - nginx
    networks:
      - translation-network

  # Main application (multiple instances for load balancing)
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: translation-app
    expose:
      - "8080"
    environment:
      - SERVER_PORT=8080
      - SERVER_HOST=0.0.0.0
      - REDIS_URL=redis://redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_DB=0
      - RABBITMQ_URL=amqp://${RABBITMQ_USER}:${RABBITMQ_PASS}@rabbitmq:5672/
      - RABBITMQ_QUEUE=translation_tasks
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      - redis
      - rabbitmq
    networks:
      - translation-network
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
    deploy:
      replicas: 3

  # Redis service
  redis:
    image: redis:7-alpine
    container_name: translation-redis
    expose:
      - "6379"
    volumes:
      - redis_data:/data
    networks:
      - translation-network
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}

  # RabbitMQ service
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: translation-rabbitmq
    expose:
      - "5672"
      - "15672"
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASS}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - translation-network
    restart: unless-stopped

volumes:
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local

networks:
  translation-network:
    driver: bridge 